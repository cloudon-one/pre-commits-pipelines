name: Infrastructure Checks

on:
  pull_request:
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.hcl'
      - 'Dockerfile'
      - '.github/workflows/**'
      - '.pre-commit-config.yaml'
  push:
    branches: [ main, master ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.hcl'
      - 'Dockerfile'
      - '.github/workflows/**'
      - '.pre-commit-config.yaml'

# Cancel any in-progress job or run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  gitguard:
    name: GitGuardian scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to scan git history

      - name: Run GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.34.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  tfsec:
    name: TFSec Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          version: latest
          additional_args: --no-color --format json --run-statistics --out string --format json

  infracost-pull-request-checks:
    name: Infracost Pull Request Checks
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Required to post comments
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=. \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{ github.token }} \
                                     --pull-request=${{ github.event.pull_request.number }} \
                                     --behavior=update

  # Run Infracost on default branch and update Infracost Cloud
  infracost-default-branch-update:

    name: Infracost Default Branch Update
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    runs-on: ubuntu-latest
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Checkout main/master branch
        uses: actions/checkout@v4

      - name: Run Infracost on default branch and update Infracost Cloud
        run: |
          infracost breakdown --path=. \
                    --format=json \
                    --out-file=infracost.json

          infracost upload --path=infracost.json || echo "Always pass main branch runs even if there are policy failures"

  # Update PR status in Infracost Cloud
  infracost-pull-request-status-update:
    name: Infracost PR Status Update
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Infracost PR Status Update
      run: |
        PR_STATUS="MERGED"
        if [[ ${{ github.event.pull_request.merged }} = false ]]; then PR_STATUS="CLOSED"; fi

        echo "Updating status of ${{ github.event.pull_request.html_url }} to $PR_STATUS"
        curl -i \
          --request POST \
          --header "Content-Type: application/json" \
          --header "X-API-Key: $INFRACOST_API_KEY" \
          --data "{ \"query\": \"mutation {updatePullRequestStatus( url: \\\"${{ github.event.pull_request.html_url }}\\\", status: $PR_STATUS )}\" }" \
          "https://dashboard.api.infracost.io/graphql";
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

  infra-checks:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for Git-based tools

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: infra-checks:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run pre-commit checks
        id: precommit
        run: |
          # Initialize git configuration in the container
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace infra-checks:latest /bin/sh -c '
            git config --global --add safe.directory /workspace
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            pre-commit run --all-files
          '

      - name: Run TFLint with custom rules
        id: tflint
        run: |
          exit_code=0
          for dir in $(find . -type f -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Running TFLint in $dir"
            if ! docker run --rm -v $(pwd):/workspace -w /workspace/$dir infra-checks:latest tflint --format=compact; then
              echo "::error::TFLint failed in $dir"
              exit_code=1
            fi
          done
          exit $exit_code

      - name: Run Terraform initialization
        id: tf-init
        if: success() || failure()  # Run even if previous step failed
        run: |
          exit_code=0
          for dir in $(find . -type f -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Initializing Terraform in $dir"
            if ! docker run --rm -v $(pwd):/workspace -w /workspace/$dir infra-checks:latest terraform init -backend=false; then
              echo "::error::Terraform init failed in $dir"
              exit_code=1
            fi
          done
          exit $exit_code

      - name: Run Terraform validation
        id: tf-validate
        if: success() || failure()  # Run even if previous step failed
        run: |
          exit_code=0
          for dir in $(find . -type f -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Validating Terraform in $dir"
            if ! docker run --rm -v $(pwd):/workspace -w /workspace/$dir infra-checks:latest terraform validate; then
              echo "::error::Terraform validation failed in $dir"
              exit_code=1
            fi
          done
          exit $exit_code

      - name: Check for required providers
        id: check-providers
        if: success() || failure()  # Run even if previous step failed
        run: |
          exit_code=0
          for dir in $(find . -type f -name "*.tf" -exec dirname {} \; | sort -u); do
            echo "Checking required providers in $dir"
            if ! grep -q "required_providers" "$dir"/*.tf; then
              echo "::error::required_providers block missing in $dir"
              exit_code=1
            fi
          done
          exit $exit_code

      - name: Check workflow status
        if: always()
        run: |
          if [ "${{ steps.precommit.outcome }}" == "failure" ] || \
             [ "${{ steps.tflint.outcome }}" == "failure" ] || \
             [ "${{ steps.tf-init.outcome }}" == "failure" ] || \
             [ "${{ steps.tf-validate.outcome }}" == "failure" ] || \
             [ "${{ steps.check-providers.outcome }}" == "failure" ]; then
            echo "One or more infrastructure checks failed"
            exit 1
          fi
